//! # DBus interface proxy for: `org.gtk.vfs.MountTracker`
//!
//! This code was generated by `zbus-xmlgen` `4.0.0` from DBus introspection data.
//! Source: `org.gtk.vfs.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus2.github.io/zbus/client.html)
//! section of the zbus documentation.
//!

use zbus::dbus_proxy;

#[dbus_proxy(interface = "org.gtk.vfs.MountTracker", assume_defaults = true)]
trait MountTracker {
    /// ListMountTypes method
    fn list_mount_types(&self) -> zbus::Result<Vec<String>>;

    /// ListMountableInfo method
    fn list_mountable_info(&self) -> zbus::Result<Vec<(String, String, Vec<String>, i32, bool)>>;

    /// ListMounts method
    #[allow(clippy::type_complexity)]
    fn list_mounts(
        &self,
    ) -> zbus::Result<
        Vec<(
            String,
            zbus::zvariant::OwnedObjectPath,
            String,
            String,
            String,
            String,
            String,
            String,
            bool,
            Vec<u8>,
            (
                Vec<u8>,
                std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
            ),
            Vec<u8>,
        )>,
    >;

    /// ListMounts2 method
    #[allow(clippy::type_complexity)]
    fn list_mounts2(
        &self,
        user_visible_only: bool,
    ) -> zbus::Result<
        Vec<(
            String,
            zbus::zvariant::OwnedObjectPath,
            String,
            String,
            String,
            String,
            String,
            String,
            bool,
            Vec<u8>,
            (
                Vec<u8>,
                std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
            ),
            Vec<u8>,
        )>,
    >;

    /// LookupMount method
    #[allow(clippy::type_complexity)]
    fn lookup_mount(
        &self,
        mount_spec: &(
            &[u8],
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        ),
    ) -> zbus::Result<(
        String,
        zbus::zvariant::OwnedObjectPath,
        String,
        String,
        String,
        String,
        String,
        String,
        bool,
        Vec<u8>,
        (
            Vec<u8>,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        ),
        Vec<u8>,
    )>;

    /// LookupMountByFusePath method
    #[allow(clippy::type_complexity)]
    fn lookup_mount_by_fuse_path(
        &self,
        fuse_path: &[u8],
    ) -> zbus::Result<(
        String,
        zbus::zvariant::OwnedObjectPath,
        String,
        String,
        String,
        String,
        String,
        String,
        bool,
        Vec<u8>,
        (
            Vec<u8>,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        ),
        Vec<u8>,
    )>;

    /// MountLocation method
    fn mount_location(
        &self,
        mount_spec: &(
            &[u8],
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        ),
        mount_source: &(&str, zbus::zvariant::ObjectPath<'_>),
    ) -> zbus::Result<()>;

    /// RegisterFuse method
    fn register_fuse(&self) -> zbus::Result<()>;

    /// RegisterMount method
    #[allow(clippy::too_many_arguments)]
    fn register_mount(
        &self,
        obj_path: &zbus::zvariant::ObjectPath<'_>,
        display_name: &str,
        stable_name: &str,
        x_content_types: &str,
        icon: &str,
        symbolic_icon: &str,
        prefered_filename_encoding: &str,
        user_visible: bool,
        mount_spec: &(
            &[u8],
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        ),
        default_location: &[u8],
    ) -> zbus::Result<()>;

    /// UnregisterMount method
    fn unregister_mount(&self, obj_path: &zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// Mounted signal
    #[dbus_proxy(signal)]
    fn mounted(
        &self,
        mount: (
            &str,
            zbus::zvariant::ObjectPath<'_>,
            &str,
            &str,
            &str,
            &str,
            &str,
            &str,
            bool,
            &[u8],
            (
                &[u8],
                std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
            ),
            &[u8],
        ),
    ) -> zbus::Result<()>;

    /// Unmounted signal
    #[dbus_proxy(signal)]
    fn unmounted(
        &self,
        mount: (
            &str,
            zbus::zvariant::ObjectPath<'_>,
            &str,
            &str,
            &str,
            &str,
            &str,
            &str,
            bool,
            &[u8],
            (
                &[u8],
                std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
            ),
            &[u8],
        ),
    ) -> zbus::Result<()>;
}
